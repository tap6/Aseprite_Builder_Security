name: Build and Release Aseprite

on:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  fetch-aseprite-info:
    name: Fetch Aseprite Release Info
    runs-on: ubuntu-latest
    outputs:
      download-link: ${{ steps.aseprite-link.outputs.download-link }}
      release-tag: ${{ steps.aseprite-link.outputs.release-tag }}
    steps:
      - name: Fetch Aseprite release link
        id: aseprite-link
        run: |
          echo "Fetching Aseprite release..."
          RELEASE_API="https://api.github.com/repos/aseprite/aseprite/releases/latest"
          MATCH_REGEX="Aseprite-.*?-Source.zip"
          DOWNLOAD_LINK=""
          RELEASE_TAG=""

          for i in {1..10}; do
            RESPONSE=$(curl -s $RELEASE_API)
            RELEASE_TAG=$(echo "$RESPONSE" | jq -r '.tag_name')
            echo "Release Tag: $RELEASE_TAG"

            for asset in $(echo "$RESPONSE" | jq -r '.assets[].browser_download_url'); do
              if [[ $asset =~ $MATCH_REGEX ]]; then
                DOWNLOAD_LINK=$asset
                break
              fi
            done

            if [[ -n "$DOWNLOAD_LINK" ]]; then
              echo "Found Aseprite release: $DOWNLOAD_LINK"
              echo "download-link=$DOWNLOAD_LINK" >> $GITHUB_ENV
              echo "release-tag=$RELEASE_TAG" >> $GITHUB_ENV
              exit 0
            fi

            echo "Retrying after 10s..."
            sleep 10
          done

          echo "Failed to fetch release!"
          exit 1

  build-aseprite:
    name: Build Aseprite
    needs: fetch-aseprite-info
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [windows-latest, ubuntu-latest, macos-latest]
        fail-fast: false
    steps:
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

      - uses: actions/checkout@v4

      - name: Clone Aseprite
        run: |
          git clone --recursive -j8 https://github.com/aseprite/aseprite.git --branch ${{ env.release-tag }}

      - name: Install Skia
        working-directory: aseprite
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] ; then
            choco install wget -y --no-progress
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
            unzip Skia-Windows-Release-x64.zip -d skia
          elif [[ "${{ runner.os }}" == "macOS" ]] ; then
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-arm64.zip
            unzip Skia-macOS-Release-arm64.zip -d skia
          else
            wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libc++.zip
            unzip Skia-Linux-Release-x64-libc++.zip -d skia
          fi

      - name: Install Ninja
        uses: aseprite/get-ninja@main

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Generating Makefiles
        shell: bash
        working-directory: aseprite
        run: |
          export enable_ccache=off
          export laf_backend=skia
          export enable_scripting=on

          if [[ "${{ runner.os }}" == "macOS" ]] ; then
            export skia_arch=arm64
          else
            export skia_arch=x64
          fi

          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=OFF \
            -ENABLE_SCRIPTING=$enable_scripting \
            -ENABLE_CCACHE=$enable_ccache \
            -DLAF_BACKEND=$laf_backend \
            -DSKIA_DIR=$(realpath skia) \
            -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-$skia_arch)

      - name: Compiling
        shell: bash
        working-directory: aseprite
        run: |
          cd build && ninja

      - name: Clean Up Build Folder
        working-directory: aseprite/build/bin
        run: find . -mindepth 1 ! \( -name 'aseprite' -o -name 'aseprite.exe' -o -name 'data' -prune \) -exec rm -rf {} +

      - name: Make Portable Zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-${{ matrix.os }}
          path: aseprite/build/bin/*
