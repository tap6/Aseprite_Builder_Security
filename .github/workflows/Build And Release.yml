name: Build Aseprite

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Aseprite Version'
        required: true
        default: 'v1.3.13'  # 默认使用 v1.3.13
        type: string

jobs:
  build:
    name: Build Aseprite (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      SKIA_VERSION: "m102-861e4743af"  # 固定 Skia 版本，用户可手动修改
      SKIA_BASE_URL: "https://github.com/aseprite/skia/releases/download"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y cmake ninja-build g++ clang libc++-dev libc++abi-dev libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev curl git
          sudo ln -sf /usr/bin/clang++ /usr/bin/c++

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja llvm fontconfig curl git
          brew link --overwrite cmake

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y cmake ninja git curl

      - name: Download Skia (Linux)
        if: runner.os == 'Linux'
        run: |
          SKIA_URL="${{ env.SKIA_BASE_URL }}/${{ env.SKIA_VERSION }}/Skia-Linux-Release-x64-libc++.zip"
          echo "Downloading Skia from: $SKIA_URL"
          curl -L -o skia.zip "$SKIA_URL"
          unzip skia.zip -d skia
          find skia -name "libskia.a" || echo "Error: libskia.a not found!"
          if [ ! -f "skia/libskia.a" ] && [ ! -f "skia/out/Release/libskia.a" ]; then exit 1; fi

      - name: Download Skia (macOS)
        if: runner.os == 'macOS'
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            SKIA_FILE="Skia-macOS-Release-arm64.zip"
          else
            SKIA_FILE="Skia-macOS-Release-x64.zip"
          fi
          SKIA_URL="${{ env.SKIA_BASE_URL }}/${{ env.SKIA_VERSION }}/$SKIA_FILE"
          echo "Downloading Skia from: $SKIA_URL"
          curl -L -o skia.zip "$SKIA_URL"
          unzip skia.zip -d skia
          find skia -name "libskia.a" || echo "Error: libskia.a not found!"
          if [ ! -f "skia/libskia.a" ] && [ ! -f "skia/out/Release/libskia.a" ]; then exit 1; fi

      - name: Download Skia (Windows)
        if: runner.os == 'Windows'
        run: |
          $skia_url = "${{ env.SKIA_BASE_URL }}/${{ env.SKIA_VERSION }}/Skia-Windows-Release-x64.zip"
          Write-Output "Downloading Skia from: $skia_url"
          Invoke-WebRequest -Uri $skia_url -OutFile skia.zip
          powershell -command "Expand-Archive -Path skia.zip -DestinationPath skia"
          Get-ChildItem -Path skia -Recurse -Filter "libskia.a"
          if (-not (Test-Path "skia/libskia.a") -and -not (Test-Path "skia/out/Release/libskia.a")) { Write-Error "Error: libskia.a not found!"; exit 1 }

      - name: Clone Aseprite (with submodules)
        run: |
          git clone --recursive --depth=1 --branch ${{ github.event.inputs.version || 'v1.3.13' }} https://github.com/aseprite/aseprite.git aseprite
          if [ ! -f "aseprite/CMakeLists.txt" ]; then echo "Error: CMakeLists.txt not found!"; exit 1; fi

      - name: Build Aseprite
        run: |
          cd aseprite
          mkdir build
          cd build
          SKIA_LIB_PATH="../../skia/libskia.a"
          if [ ! -f "$SKIA_LIB_PATH" ]; then SKIA_LIB_PATH="../../skia/out/Release/libskia.a"; fi
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
                -DLAF_BACKEND=skia \
                -DSKIA_DIR=../../skia \
                -DSKIA_LIBRARY_DIR=$(dirname "$SKIA_LIB_PATH") \
                -DSKIA_LIBRARY=$SKIA_LIB_PATH ..
          ninja

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-${{ matrix.os }}
          path: aseprite/build/bin/aseprite*

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          files: aseprite/build/bin/aseprite*
          tag_name: aseprite-${{ github.event.inputs.version }}
          name: "Aseprite ${{ github.event.inputs.version }} Release"
          body: "Compiled version of Aseprite ${{ github.event.inputs.version }} for Windows, Linux, and macOS"
